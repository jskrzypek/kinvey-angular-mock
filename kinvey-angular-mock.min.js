!function(){"use strict";function e(e){var r={},o={};return o.id="mock123456mock123456mock",o.acl={creator:o.id},o.lmt="2014-12-19T16:56:47.527Z",o.ect="2014-12-19T16:56:47.527Z",o.kmd={lmt:o.lmt,ect:o.ect},o.username="mockUser123",o.password="mockPassword",o.password="mock@email.com",o.user={_id:o.id,_acl:{creator:o.id},_kmd:{ect:"",lmt:""},username:o.username,password:o.password,email:o.email},r.API_ENDPOINT="https://angular.kinvey.mock",r.API_VERSION="X",r.SDK_VERSION="x.x.x",r.getActiveUser=function(){var r=e.defer();return r.resolve(o.user),r.promise},r.init=function(){var r=e.defer();return r.resolve(o.user),r.promise},r.ping=function(){var r=e.defer();return r.resolve({version:"x.x.x",kinvey:"hello Mock App",appName:"Mock App",environmentName:"Mock Environment"}),r.promise},r.Query=function(){r.Query.prototype.and=function(){return new r.Query},r.Query.prototype.ascending=function(){return new r.Query},r.Query.prototype.contains=function(){return new r.Query},r.Query.prototype.containsAll=function(){return new r.Query},r.Query.prototype.descending=function(){return new r.Query},r.Query.prototype.equalTo=function(){return new r.Query},r.Query.prototype.exists=function(){return new r.Query},r.Query.prototype.fields=function(){return new r.Query},r.Query.prototype.greaterThan=function(){return new r.Query},r.Query.prototype.greaterThanOrEqualTo=function(){return new r.Query},r.Query.prototype.lessThan=function(){return new r.Query},r.Query.prototype.lessThanOrEqualTo=function(){return new r.Query},r.Query.prototype.limit=function(){return new r.Query},r.Query.prototype.matches=function(){return new r.Query},r.Query.prototype.mod=function(){return new r.Query},r.Query.prototype.near=function(){return new r.Query},r.Query.prototype.nor=function(){return new r.Query},r.Query.prototype.notContainedIn=function(){return new r.Query},r.Query.prototype.notEqualTo=function(){return new r.Query},r.Query.prototype.or=function(){return new r.Query},r.Query.prototype.size=function(){return new r.Query},r.Query.prototype.skip=function(){return new r.Query},r.Query.prototype.sort=function(){return new r.Query},r.Query.prototype.toJSON=function(){return new r.Query},r.Query.prototype.withinBox=function(){return new r.Query},r.Query.prototype.withinPolygon=function(){return new r.Query}},r.DataStore={clean:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.clean() success"):n.reject("mock $kinvey.DataStorer.clean() fail: collection && query is required"),n.promise},count:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.count() success"):n.reject("mock $kinvey.DataStorer.count() fail: collection && query is required"),n.promise},destroy:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.destroy() success"):n.reject("mock $kinvey.DataStorer.destroy() fail: collection && id is required"),n.promise},find:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.find() success"):n.reject("mock $kinvey.DataStore.find() fail: collection && query is required"),n.promise},get:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.get() success"):n.reject("mock $kinvey.DataStore.get() fail: collection && id is required"),n.promise},group:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.group() success"):n.reject("mock $kinvey.DataStorer.group() fail: collection && aggregation is required"),n.promise},save:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.save() success"):n.reject("mock $kinvey.DataStore.save() fail: collection && document is required"),n.promise},update:function(r,o){var n=e.defer();return r&&o?n.resolve("mock $kinvey.DataStore.update() success"):n.reject("mock $kinvey.DataStorer.update() fail: collection && document is required"),n.promise}},r.File={upload:function(r){var o=e.defer();return r?o.resolve("mock File.upload success"):o.reject("mock File.upload fail, missing file"),o.promise},destroy:function(r){var o=e.defer();return r?o.resolve("mock File.destroy success"):o.reject("mock File.destroy fail, missing fileId"),o.promise},stream:function(r){var o=e.defer();return r?o.resolve("mock File.stream success"):o.reject("mock File.stream fail, missing fileId"),o.promise}},r.User={count:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.count() success"):o.reject("mock $kinvey.User.count() fail: query is required"),o.promise},create:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.create() success"):o.reject("mock $kinvey.User.create() fail: data is required"),o.promise},destroy:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.destroy() success"):o.reject("mock $kinvey.User.destroy() fail: id is required"),o.promise},exists:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.exists() success"):o.reject("mock $kinvey.User.exists() fail: username is required"),o.promise},find:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.find() success"):o.reject("mock $kinvey.User.find() fail: query is required"),o.promise},forgotUsername:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.forgotUsername() success"):o.reject("mock $kinvey.User.forgotUsername() fail: email is required"),o.promise},get:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.get() success"):o.reject("mock $kinvey.User.get() fail: id is required"),o.promise},group:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.group() success"):o.reject("mock $kinvey.User.group() fail: aggregation is required"),o.promise},login:function(r,o){var n=e.defer(),t="[object Object]"===Object.prototype.toString(r)&&r.hasOwnProperty("username")&&r.hasOwnProperty("password"),i=r.length>0&&o.length>0;return t||i?n.resolve("mock $kinvey.User.login() success"):n.reject("mock $kinvey.User.login() fail: usernameOrData && passwordis required"),n.promise},loginWithProvider:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.loginWithProvider() success"):o.reject("mock $kinvey.User.loginWithProvider() fail: provider is required"),o.promise},logout:function(){var r=e.defer();return r.resolve(o.user),r.promise},me:function(){var r=e.defer();return r.resolve(o.user),r.promise},resetPassword:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.resetPassword() success"):o.reject("mock $kinvey.User.resetPassword() fail: username is required"),o.promise},restore:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.restore() success"):o.reject("mock $kinvey.User.restore() fail: id is required"),o.promise},signup:function(r){var n=e.defer();return r?n.resolve(o.user):n.reject("mock $kinvey.User.signup() fail: data is required"),n.promise},signupWithProvider:function(r){var n=e.defer();return r?n.resolve(o.user):n.reject("mock $kinvey.User.signupWithProvider() fail: provider is required"),n.promise},update:function(r){var n=e.defer();return r?n.resolve(o.user):n.reject("mock $kinvey.User.update() fail: data is required"),n.promise},verifyEmail:function(r){var o=e.defer();return r?o.resolve("mock $kinvey.User.verifyEmail() success"):o.reject("mock $kinvey.User.verifyEmail() fail: username is required"),o.promise}},r}e.$inject=["$q"],angular.module("kinvey-mock",[]).factory("$kinvey",e)}();